---
title: "R"
description: "R is a programming language that is specialized in statistical analysis."
format: html
from: markdown+emoji
---


## Using R

1. Use R in console
: ```bash
R
```

2. **Type your code**


3. Quit R in console
: ```bash
q()
```

Get help with functions and features
: ```R
?functionName
```

Find functions and features matching a term of interest
: ```R
??TermOfInterest
``` 

Execute R-script from terminal
: ```bash
Rscript myScript.R
```

## Import, Input, Output

Importing other scripts
: ```R
source("otherScript.R")
``` 
Executes the contents of the script.

Send all standard output to a file
: ```R
sink("output.txt")
```

Print to standard output
: ```R
print("my Output")
```

## Operations, numbers, vectors

Assign values to a variable
: ```R
x <- 4.5
```

Create a vector
: ```R
x <- c(10, 4.5, 12, 5)
```
::: {.callout-warning} 
**!**: If you integrate vectors in your vector ( `c(10, c(11, 12), 13)` ) it will get **flattened** (like `c(10, 11, 12, 13)` ).
:::

Elementwise adding, subtracting, deviding, multiplying, ... vectors
: ```R
x <- c(1, 2)
y <- c(10, 11, 12, 13)
z <- x + y
```
::: {.callout-warning}
You can make elementwise operations with vectors of different lengths, as long as the longer one is a multiple of the shorter one. **The shorter vector is repeated**. :anguished:
:::

Common operators          |
--------------------------|-----
maximum, minimum          | `max(x)` `min(x)`
Vector of min and max     | `range(x)`
Number of elements        | `length(x)`
Sum of the elements       | `sum(x)`
Product of the elements   | `prod(x)`
Mean of the elements      | `mean(x)`
Variance of the elements  | `var(x)`
Sort elements ascending   | `sort(x)`

:  {tbl-colwidths="[50,50]"}


**!**: If x is a n-by-p matrix, then `var(x)` will return a p-by-p covariance matrix.

Generate sequences
: ```R
x <- c(1:10) # Integers from 1 to 10
# Or
x <- seq(1,10, 0.5) # 1.0, 1.5, 2.0, 2.5, ... 
```
`c(10, 1)` generates a descending sequence.

Repeat vector:
```R
x <- c(1,2,3)
y <- rep(x, times = 5) # 1, 2, 3, 1, 2, 3, 1, ...
```

Repeat elements in vector:
```R
x <- c(1,2,3)
y <- rep(x, each = 2) # 1, 1, 2, 2, 3, 3
```

### Selecting elements in vectors

Selecting first 10 elements in vector
: ```R
x[1:10]
```

Selecting non-missing elements in vector
: ```R
x[!is.na(x)]
```

Selecting all elements, except the first 10
: ```R
x[-(1:5)]
```

Boolean operations     | 
-----------------------|----
create boolean vector  | `y <- c(10, 12, 15) < 13` # [True, True, False]
Boolean operators      | `<, <=, >, >=, ==, !=`
and                    | `cond1 & cond2`
or                     | `cond1 | cond2`
not                    | `!cond`

:  {tbl-colwidths="[50,50]"}


If logical vectors are used in arithmetic operations, `False` becomes `0`, `True` becomes `1`.

Missing values
: `NA` or `NaN`
**!**: Operations with missing values return missing values.

Checking for missing values: `is.na(x)` or `is.nan(x)` (`NaN` = Not a number)

Assign value only to elements where condition is true:
```R 
x[is.na(x)] <- 0
```

Characters           |
---------------------|----
Character string     | `"..."` 
Escape character     | `\`
New line             | `\n`
Tab                  | `\t`

:  {tbl-colwidths="[50,50]"}


Concatenate arguments 1 by 1 as characters: `paste(c("X", "Y", "Z"), 1:3, sep="_")`



[
  {
    "objectID": "cheatsheets/VSCode.html",
    "href": "cheatsheets/VSCode.html",
    "title": "VS Code",
    "section": "",
    "text": "Workspace Commands\n¬†\n\n\n\n\nCommand Palette\n\n\n\nSearch & open file\n\n\n\nToggle Sidebar\n\n\n\nSplit editor\n\n\n\nSwitch to editor split\n / / \n\n\nSwitch to tab\n / \n\n\nClose tab\n\n\n\nReopen closed tab\n\n\n\n\n\n\n\n\n\n\n\nSwitch between Views\n\n\n\n\n\nShow File explorer\n\n\n\nShow Debug View\n\n\n\nShow Find View\n\n\n\nShow Git View\n \n\n\n\n\n\n\n\n\n\n\nCode Navigation\n¬†\n\n\n\n\nGo to line\nCtrl-G /  :\n\n\nGo to beginning / end of line\n \n\n\nGo to beginning / end of word\n \n\n\nGo to matching bracket\n\n\n\nGo to symbol/function\n\n\n\n\n\n\n\n\n\n\n\nCode Editing\n¬†\n\n\n\n\nCopy line\n\n\n\nCut line\n\n\n\nDelete line\n\n\n\nOutdent line\n\n\n\nToggle comment line\n\n\n\nMove line up or down\nOption‚Üë / Option‚Üì\n\n\nCopy line up or down\nOption-shift‚Üë / Option-Shift‚Üì\n\n\nAdd cursor below/above\n / \n\n\nFind and replace\n\n\n\n\n\n\n\n\n\n\n\nCode selection\n¬†\n\n\n\n\nSelect line\n\n\n\nExpand selection\nShift-Option‚Üí"
  },
  {
    "objectID": "cheatsheets/azure_ml.html",
    "href": "cheatsheets/azure_ml.html",
    "title": "Azure ML",
    "section": "",
    "text": "Azure ML is the machine learning service of the Azure Cloud Platform."
  },
  {
    "objectID": "cheatsheets/azure_ml.html#experiments",
    "href": "cheatsheets/azure_ml.html#experiments",
    "title": "Azure ML",
    "section": "Experiments",
    "text": "Experiments\n\nDelete Experiments without jobs\n\nfrom azureml.core import Workspace, Experiment\naml_workspace = Workspace.from_config()\nexperiment_id = Experiment(aml_workspace, '&lt;experiment_name&gt;').id\nExperiment.delete(aml_workspace, experiment_id)"
  },
  {
    "objectID": "cheatsheets/bash.html",
    "href": "cheatsheets/bash.html",
    "title": "Bash",
    "section": "",
    "text": "Running processes ordered by resource consumption\n\nhtop\n\nNumber of files in a provided directory\n\nls [myDirectory] | wc -l \n\n\n\n\n\n\nRemove directory tree with all its contents\n\nrm -rf [myDirectory]\n\n\n\n\n\n\nShow access permissions of file in directory\n\nls -l [myDirectory]\n\nChange permissions of file\n\nchmod u=rwx,g=rwx,o=rwx [myFile]\nExplanation\n\n\n\n\n\n\nUse commandline arguments\n\nwhile getopts :c:t flag\ndo\ncase \"${flag}\" in\n    c) \n        config=${OPTARG}\n        python3 file_to_be_called.py -c $config\n        ;;\n    t)\n        python3 file_to_be_called.py -t\n        ;;\n    :) \n        echo \"No arguments passed\"\n        exit 1\n        ;;\n    ?) \n      echo \"Please call the script like this: bash_script.sh [-c config_file]\"\n      exit 1\n      ;;\nesac\ndone\nThe : before the flag-character c lets you handle errors yourself (e.g.¬†no arguments passed and wrong arguments passed). The : after the flag-character c indicates that a value is required after the flag."
  },
  {
    "objectID": "cheatsheets/bash.html#files",
    "href": "cheatsheets/bash.html#files",
    "title": "Bash",
    "section": "",
    "text": "Running processes ordered by resource consumption\n\nhtop\n\nNumber of files in a provided directory\n\nls [myDirectory] | wc -l \n\n\n\n\n\n\nRemove directory tree with all its contents\n\nrm -rf [myDirectory]\n\n\n\n\n\n\nShow access permissions of file in directory\n\nls -l [myDirectory]\n\nChange permissions of file\n\nchmod u=rwx,g=rwx,o=rwx [myFile]\nExplanation\n\n\n\n\n\n\nUse commandline arguments\n\nwhile getopts :c:t flag\ndo\ncase \"${flag}\" in\n    c) \n        config=${OPTARG}\n        python3 file_to_be_called.py -c $config\n        ;;\n    t)\n        python3 file_to_be_called.py -t\n        ;;\n    :) \n        echo \"No arguments passed\"\n        exit 1\n        ;;\n    ?) \n      echo \"Please call the script like this: bash_script.sh [-c config_file]\"\n      exit 1\n      ;;\nesac\ndone\nThe : before the flag-character c lets you handle errors yourself (e.g.¬†no arguments passed and wrong arguments passed). The : after the flag-character c indicates that a value is required after the flag."
  },
  {
    "objectID": "cheatsheets/bash.html#processes",
    "href": "cheatsheets/bash.html#processes",
    "title": "Bash",
    "section": "Processes",
    "text": "Processes\n\nList running processes\n\nhtop\n\n\n\nTo kill process: k\nTo order processes by memory consumption: type Ctrl-M\n\n\nKill process\n\nkill -9 [process-PID]"
  },
  {
    "objectID": "cheatsheets/Quarto.html",
    "href": "cheatsheets/Quarto.html",
    "title": "Quarto",
    "section": "",
    "text": "Collapsable callout block\n\n::: {.callout-warning collapse=true appearance=\"simple\"}  \n### Title \n:::\n\nPanels\n\n::: {.panel-tabset}\n### Panel heading 1\n### Panel heading 2\n:::"
  },
  {
    "objectID": "cheatsheets/Quarto.html#blocks",
    "href": "cheatsheets/Quarto.html#blocks",
    "title": "Quarto",
    "section": "",
    "text": "Collapsable callout block\n\n::: {.callout-warning collapse=true appearance=\"simple\"}  \n### Title \n:::\n\nPanels\n\n::: {.panel-tabset}\n### Panel heading 1\n### Panel heading 2\n:::"
  },
  {
    "objectID": "cheatsheets/Quarto.html#tables",
    "href": "cheatsheets/Quarto.html#tables",
    "title": "Quarto",
    "section": "Tables",
    "text": "Tables\n\nMarkdown table\n\nHeader col 1 | header col 2¬†\n-----|-----\ncontent col 1 | content col 2"
  },
  {
    "objectID": "cheatsheets/Quarto.html#formatting",
    "href": "cheatsheets/Quarto.html#formatting",
    "title": "Quarto",
    "section": "Formatting",
    "text": "Formatting\n\nFont-color\n\n&lt;font color=\"grey\"&gt;\n&lt;/font&gt;"
  },
  {
    "objectID": "cheatsheets/Quarto.html#keyboard-shortcuts",
    "href": "cheatsheets/Quarto.html#keyboard-shortcuts",
    "title": "Quarto",
    "section": "Keyboard shortcuts",
    "text": "Keyboard shortcuts\n\nFormat keyboard keys for different operating systems\n\n\n\n\n{{&lt; kbd mac=Shift-Command-O win=Shift-Control-O linux=Shift-Ctrl-L &gt;}}\n\n\nsimple\n\n\n\n\n{{&lt; kbd Shift-Ctrl-P &gt;}}\n\nFormat arrow keys\n\n\n\n\n{{&lt;kbd &uarr; &gt;}}\n{{&lt;kbd &darr; &gt;}}\n{{&lt;kbd &larr; &gt;}}\n{{&lt;kbd &rarr; &gt;}}\n‚Üë ‚Üì ‚Üê ‚Üí"
  },
  {
    "objectID": "cheatsheets/R.html",
    "href": "cheatsheets/R.html",
    "title": "R",
    "section": "",
    "text": "Use R in console\n\nR\n\n\nType your code\n\nQuit R in console\n\nq()\n\n\n\n\nGet help with functions and features\n\n?functionName\n\nFind functions and features matching a term of interest\n\n??TermOfInterest\n\nExecute R-script from terminal\n\nRscript myScript.R"
  },
  {
    "objectID": "cheatsheets/R.html#using-r",
    "href": "cheatsheets/R.html#using-r",
    "title": "R",
    "section": "",
    "text": "Use R in console\n\nR\n\n\nType your code\n\nQuit R in console\n\nq()\n\n\n\n\nGet help with functions and features\n\n?functionName\n\nFind functions and features matching a term of interest\n\n??TermOfInterest\n\nExecute R-script from terminal\n\nRscript myScript.R"
  },
  {
    "objectID": "cheatsheets/R.html#import-input-output",
    "href": "cheatsheets/R.html#import-input-output",
    "title": "R",
    "section": "Import, Input, Output",
    "text": "Import, Input, Output\n\nImporting other scripts\n\nsource(\"otherScript.R\")\nExecutes the contents of the script.\n\nSend all standard output to a file\n\nsink(\"output.txt\")\n\nPrint to standard output\n\nprint(\"my Output\")"
  },
  {
    "objectID": "cheatsheets/R.html#operations-numbers-vectors",
    "href": "cheatsheets/R.html#operations-numbers-vectors",
    "title": "R",
    "section": "Operations, numbers, vectors",
    "text": "Operations, numbers, vectors\n\nAssign values to a variable\n\nx &lt;- 4.5\n\nCreate a vector\n\nx &lt;- c(10, 4.5, 12, 5)\n\n\n\n\n\n\nWarning\n\n\n\n!: If you integrate vectors in your vector ( c(10, c(11, 12), 13) ) it will get flattened (like c(10, 11, 12, 13) ).\n\n\n\nElementwise adding, subtracting, deviding, multiplying, ‚Ä¶ vectors\n\nx &lt;- c(1, 2)\ny &lt;- c(10, 11, 12, 13)\nz &lt;- x + y\n\n\n\n\n\n\nWarning\n\n\n\nYou can make elementwise operations with vectors of different lengths, as long as the longer one is a multiple of the shorter one. The shorter vector is repeated. üòß\n\n\n\n\n\n\n\n\n\n\n\nCommon operators\n\n\n\n\n\nmaximum, minimum\nmax(x) min(x)\n\n\nVector of min and max\nrange(x)\n\n\nNumber of elements\nlength(x)\n\n\nSum of the elements\nsum(x)\n\n\nProduct of the elements\nprod(x)\n\n\nMean of the elements\nmean(x)\n\n\nVariance of the elements\nvar(x)\n\n\nSort elements ascending\nsort(x)\n\n\n\n!: If x is a n-by-p matrix, then var(x) will return a p-by-p covariance matrix.\n\nGenerate sequences\n\nx &lt;- c(1:10) # Integers from 1 to 10\n# Or\nx &lt;- seq(1,10, 0.5) # 1.0, 1.5, 2.0, 2.5, ... \nc(10, 1) generates a descending sequence.\n\n\nRepeat vector:\nx &lt;- c(1,2,3)\ny &lt;- rep(x, times = 5) # 1, 2, 3, 1, 2, 3, 1, ...\nRepeat elements in vector:\nx &lt;- c(1,2,3)\ny &lt;- rep(x, each = 2) # 1, 1, 2, 2, 3, 3\n\nSelecting elements in vectors\n\nSelecting first 10 elements in vector\n\nx[1:10]\n\nSelecting non-missing elements in vector\n\nx[!is.na(x)]\n\nSelecting all elements, except the first 10\n\nx[-(1:5)]\n\n\n\n\n\n\n\n\n\nBoolean operations\n\n\n\n\n\ncreate boolean vector\ny &lt;- c(10, 12, 15) &lt; 13 # [True, True, False]\n\n\nBoolean operators\n&lt;, &lt;=, &gt;, &gt;=, ==, !=\n\n\nand\ncond1 & cond2\n\n\nor\ncond1 | cond2\n\n\nnot\n!cond\n\n\n\nIf logical vectors are used in arithmetic operations, False becomes 0, True becomes 1.\n\nMissing values\n\nNA or NaN !: Operations with missing values return missing values.\n\n\nChecking for missing values: is.na(x) or is.nan(x) (NaN = Not a number)\nAssign value only to elements where condition is true:\nx[is.na(x)] &lt;- 0\n\n\n\n\n\n\n\nCharacters\n\n\n\n\n\nCharacter string\n\"...\"\n\n\nEscape character\n\\\n\n\nNew line\n\\n\n\n\nTab\n\\t\n\n\n\nConcatenate arguments 1 by 1 as characters: paste(c(\"X\", \"Y\", \"Z\"), 1:3, sep=\"_\") or paste(\"Hello\", \"World\")"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Cheatsheets",
    "section": "",
    "text": "This is a collection of my cheatsheets. Feel free to use them. If you want to edit them, to your own needs: Pleae visit my Github-Repo, give it a star and clone it.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAzure ML\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBash\n\n\nBash is a command line tool and language.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nConda\n\n\nConda is a package and virtual environment manager.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGCP: gcloud CLI\n\n\nGcloud CLI is the command line interface of the Google Cloud Platform.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGit\n\n\nGit is a version control system mostly used for code.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPython\n\n\nPython is one of the most popular programming languages.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nQuarto\n\n\nQuarto is a publishing tool that allows you to render markdown documents into websites, documents and presentations.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nR\n\n\nR is a programming language that is specialized in statistical analysis.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nVS Code\n\n\nVisual studio code is one of the most popular code editors.\n\n\n\n\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "cheatsheets/git.html",
    "href": "cheatsheets/git.html",
    "title": "Git",
    "section": "",
    "text": "Set username (for your commits)\n\ngit config --global user.name \"myname\"\n\nSet email (for your commits)\n\ngit config --global user.email \"my@email.com\""
  },
  {
    "objectID": "cheatsheets/git.html#configuration",
    "href": "cheatsheets/git.html#configuration",
    "title": "Git",
    "section": "",
    "text": "Set username (for your commits)\n\ngit config --global user.name \"myname\"\n\nSet email (for your commits)\n\ngit config --global user.email \"my@email.com\""
  },
  {
    "objectID": "cheatsheets/git.html#new-repositories",
    "href": "cheatsheets/git.html#new-repositories",
    "title": "Git",
    "section": "New repositories",
    "text": "New repositories\n\nDownload git repo from server\n\ngit clone url.com"
  },
  {
    "objectID": "cheatsheets/git.html#managing-changes",
    "href": "cheatsheets/git.html#managing-changes",
    "title": "Git",
    "section": "Managing changes",
    "text": "Managing changes\n\n\nGet changes from remote repository\n\ngit fetch\n\n\n\nCheck differences to branch you want merge into yours\n\ngit diff feature1..dev\n\n\n\nMerge changes from remote branch into your branch\n\ngit merge origin master\n\n\n\nCheck what files are(n‚Äôt) staged for commit\n\ngit status\n\n\n\nStage all files that are tracked (not in .gitignore)\n\ngit add .\n\nIf necessary: Unstage all files (or a specific file) that are staged\n\n git reset [specific-file]\n\n\n\nCommit all staged files (add to versioning history)\n\ngit commit -m \"[ticket-id + what you changed]\"\n\n\n\nLoad commits into remote git repository\n\ngit push"
  },
  {
    "objectID": "cheatsheets/git.html#pull-changes-into-devtestmaster-branch",
    "href": "cheatsheets/git.html#pull-changes-into-devtestmaster-branch",
    "title": "Git",
    "section": "Pull changes into dev/test/master branch",
    "text": "Pull changes into dev/test/master branch\n\nPull changes into dev branch (and add your changes at the end)\n\ngit fetch\ngit checkout dev\ngit pull --rebase feature1branch \n\nPull only specific commits into your branch\n\ngit cherry-pick [commit-SHA]"
  },
  {
    "objectID": "cheatsheets/git.html#undo-and-rollback",
    "href": "cheatsheets/git.html#undo-and-rollback",
    "title": "Git",
    "section": "Undo and Rollback",
    "text": "Undo and Rollback\n\nRollback the last commit\n\ngit reset head~1\n\nRollback to a specific commit\n\ngit reset [commit-SHA]\nSince you are now several commits behind the remote, you have to force push the changes: git push -f origin [myBranchyBranch].\n\n\nTo create a new commit to undo earlier commits, use git revert.\n\nTravel back to a specific commit\n\ngit checkout [commit-SHA]\n\nDelete sensitive data from history:\n\ndocs.github.com"
  },
  {
    "objectID": "cheatsheets/git.html#branches",
    "href": "cheatsheets/git.html#branches",
    "title": "Git",
    "section": "Branches",
    "text": "Branches\n\nList all branches and show which one you are on\n\ngit branch -a\n\nCreate new branch and check it out\n\ngit checkout -b [branch-name]\n\nChange to a specific branch\n\ngit checkout [specific-branch]\n\nDelete a specific branch\n\ngit branch -d [specific-branch]\n\nRename the current branch\n\ngit branch -m myNewBranch"
  },
  {
    "objectID": "cheatsheets/git.html#history",
    "href": "cheatsheets/git.html#history",
    "title": "Git",
    "section": "History",
    "text": "History\n\nShow commit history with branch dependencies\n\ngit log --graph --oneline"
  },
  {
    "objectID": "cheatsheets/Conda.html",
    "href": "cheatsheets/Conda.html",
    "title": "Conda",
    "section": "",
    "text": "conda docs - Installation\n\n\n\n\n\n\nInstallation via UNIX CLI\n\n\n\n\n\nmkdir -p ~/miniconda3\nwget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O ~/miniconda3/miniconda.sh\nbash ~/miniconda3/miniconda.sh -b -u -p ~/miniconda3\nrm -rf ~/miniconda3/miniconda.sh\n~/miniconda3/bin/conda init bash\n~/miniconda3/bin/conda init zsh\n\n\n\n\n\n\nList your existing environments\n\nconda env list\n\nCreate environment\n\nconda create --name env-name\n\nCreate a conda env from a file:\n\nconda env create -f environment.yml\n\nRemoving environment\n\nconda env remove -n env-name\n\n\nMore info: Intro to Conda virtual environments\n\n\n\n\nUse environment\n\nconda activate env-name\n\nCheck and update package versions. After activating an env:\n\npython --version\n\n\nconda update python\n\nUpdate whole environment according to your yaml-file:\n\nconda env update -f my_env.yml\n\nSwitch back to base environment\n\nconda deactivate env-name\n\nInstall package: Latest version\n\nconda install pandas \n\nInstall package: Specific version\n\nconda install pandas==2.0.0\n\nInstall package: From different channel\n\nconda install pandas -c conda-forge -y\n\nList packages in environment\n\nconda list\n\nExport environment to yml\n\nconda env export &gt; environment.yml"
  },
  {
    "objectID": "cheatsheets/Conda.html#installation",
    "href": "cheatsheets/Conda.html#installation",
    "title": "Conda",
    "section": "",
    "text": "conda docs - Installation\n\n\n\n\n\n\nInstallation via UNIX CLI\n\n\n\n\n\nmkdir -p ~/miniconda3\nwget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O ~/miniconda3/miniconda.sh\nbash ~/miniconda3/miniconda.sh -b -u -p ~/miniconda3\nrm -rf ~/miniconda3/miniconda.sh\n~/miniconda3/bin/conda init bash\n~/miniconda3/bin/conda init zsh\n\n\n\n\n\n\nList your existing environments\n\nconda env list\n\nCreate environment\n\nconda create --name env-name\n\nCreate a conda env from a file:\n\nconda env create -f environment.yml\n\nRemoving environment\n\nconda env remove -n env-name\n\n\nMore info: Intro to Conda virtual environments\n\n\n\n\nUse environment\n\nconda activate env-name\n\nCheck and update package versions. After activating an env:\n\npython --version\n\n\nconda update python\n\nUpdate whole environment according to your yaml-file:\n\nconda env update -f my_env.yml\n\nSwitch back to base environment\n\nconda deactivate env-name\n\nInstall package: Latest version\n\nconda install pandas \n\nInstall package: Specific version\n\nconda install pandas==2.0.0\n\nInstall package: From different channel\n\nconda install pandas -c conda-forge -y\n\nList packages in environment\n\nconda list\n\nExport environment to yml\n\nconda env export &gt; environment.yml"
  },
  {
    "objectID": "cheatsheets/gcloud.html",
    "href": "cheatsheets/gcloud.html",
    "title": "GCP: gcloud CLI",
    "section": "",
    "text": "SSH connection\n¬†\n\n\n\n\nsetup new ssh connection to compute instance\ngcloud compute config-ssh"
  },
  {
    "objectID": "cheatsheets/Python.html",
    "href": "cheatsheets/Python.html",
    "title": "Python",
    "section": "",
    "text": "Use case\n\nYou have different classes that create objects that do the same kind of work (e.g.¬†Logistic company has trucks, ships, planes that all transport goods). Explanation: refactoring.guru\n\nWhat it does for you\n\nCreate objects and methods without having to specify the class or name of method (This is handled by factory object).\n\nBlueprint\n\n\nGithub.com/ArjanCodes\nrefactoring.guru"
  },
  {
    "objectID": "cheatsheets/Python.html#design-patterns",
    "href": "cheatsheets/Python.html#design-patterns",
    "title": "Python",
    "section": "",
    "text": "Use case\n\nYou have different classes that create objects that do the same kind of work (e.g.¬†Logistic company has trucks, ships, planes that all transport goods). Explanation: refactoring.guru\n\nWhat it does for you\n\nCreate objects and methods without having to specify the class or name of method (This is handled by factory object).\n\nBlueprint\n\n\nGithub.com/ArjanCodes\nrefactoring.guru"
  }
]